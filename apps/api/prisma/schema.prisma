// Prisma schema for AuralForge Audio AI Studio
// Database: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  owner
  admin
  editor
  viewer
}

enum JobType {
  tts
  stt
  cloning
  dubbing
}

enum JobStatus {
  queued
  processing
  completed
  failed
}

enum CloneType {
  instant
  professional
}

enum CloneStatus {
  queued
  training
  ready
  failed
}

enum AssetType {
  audio
  video
  transcript
  subtitle
}

enum Plan {
  FREE
  STARTER
  CREATOR
  PRO
  SCALE
  BUSINESS
  ENTERPRISE
}

enum SubscriptionStatus {
  active
  trialing
  past_due
  canceled
  incomplete
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  name         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  memberships Membership[]
  apiKeys     ApiKey[]
  jobs        Job[]
  auditLogs   AuditLog[]
  teamsOwned  Team[]    @relation("TeamOwner")
  usageLogs   UsageLog[]
  voiceClones VoiceClone[]
}

model Team {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String
  owner   User       @relation("TeamOwner", fields: [ownerId], references: [id])

  memberships Membership[]
  projects    Project[]
  apiKeys     ApiKey[]
  jobs        Job[]
  subscriptions Subscription[]
  clones      VoiceClone[]
  assets      Asset[]
  webhooks    Webhook[]
  usageLogs   UsageLog[]
  auditLogs   AuditLog[]
}

model Membership {
  id        String   @id @default(uuid())
  userId    String
  teamId    String
  role      Role
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
}

model Project {
  id        String   @id @default(uuid())
  teamId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team   Team   @relation(fields: [teamId], references: [id])
  jobs   Job[]
  assets Asset[]
  usageLogs UsageLog[]
}

model ApiKey {
  id         String   @id @default(uuid())
  teamId     String
  userId     String?
  name       String
  // Store hashed key; never store plaintext
  hash       String
  lastFour   String
  prefix     String   // e.g., afk_...
  createdAt  DateTime @default(now())
  revokedAt  DateTime?

  team Team @relation(fields: [teamId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  @@index([teamId])
  @@index([userId])
  @@index([prefix])
}

model Job {
  id         String   @id // use queue job id
  type       JobType
  status     JobStatus
  teamId     String
  userId     String?
  projectId  String?
  metadata   Json?
  result     Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  team    Team    @relation(fields: [teamId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
  usageLogs UsageLog[]

  @@index([teamId])
  @@index([userId])
  @@index([projectId])
  @@index([type])
  @@index([status])
}

model UsageLog {
  id         String   @id @default(uuid())
  teamId     String
  userId     String?
  projectId  String?
  jobId      String?
  credits    Int
  category   String   // e.g., tts, stt, clone, dubbing
  createdAt  DateTime @default(now())

  team    Team   @relation(fields: [teamId], references: [id])
  user    User?  @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
  job     Job?   @relation(fields: [jobId], references: [id])

  @@index([teamId])
  @@index([userId])
  @@index([projectId])
  @@index([category])
}

model Subscription {
  id                   String   @id @default(uuid())
  teamId               String   @unique
  plan                 Plan
  status               SubscriptionStatus
  stripeCustomerId     String?
  stripeSubscriptionId String?
  seats                Int      @default(1)
  monthlyCredits       Int      @default(10000)
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  team Team @relation(fields: [teamId], references: [id])
}

model VoiceClone {
  id         String      @id @default(uuid())
  teamId     String
  userId     String?
  name       String
  type       CloneType
  status     CloneStatus @default(queued)
  samplesS3  String[]    // list of S3 keys for training samples
  modelRef   String?     // reference to model id in inference system
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  team Team @relation(fields: [teamId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  @@index([teamId])
}

model Asset {
  id         String    @id @default(uuid())
  teamId     String
  projectId  String?
  type       AssetType
  s3Key      String
  mimeType   String
  durationMs Int?
  sampleRate Int?
  channels   Int?
  createdAt  DateTime  @default(now())

  team    Team   @relation(fields: [teamId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])

  @@index([teamId])
  @@index([projectId])
}

model Webhook {
  id        String   @id @default(uuid())
  teamId    String
  url       String
  secret    String
  events    String[]
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  teamId    String
  userId    String?
  action    String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  @@index([teamId])
  @@index([userId])
}